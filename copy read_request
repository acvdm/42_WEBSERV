void	c_request::read_request(int socket_fd)
{
	char	buffer[BUFFER_SIZE];
	int		receivedBytes;
	string	request;
	
	this->init_request();
	this->_socket_fd = socket_fd;


	/* ----- Lire jusqu'a la fin des headers ----- */
	// while (_buffered_data.find("\r\n\r\n") == string::npos)
	while (request.find("\r\n\r\n") == string::npos)
	{
		cout << CYAN << __FILE__ << "/" << __LINE__ << RESET << endl;
		fill(buffer, buffer + sizeof(buffer), '\0');
		// condition pour l'appel de recv ?
		receivedBytes = recv(socket_fd, buffer, sizeof(buffer) - 1, MSG_NOSIGNAL);
        if (receivedBytes <= 0)
		{
			if (receivedBytes == 0) // break ou vrai erreur ?
			{
				cout << CYAN << __FILE__ << "/" << __LINE__ << RESET << endl;
				cout << "(Request) client closed connection: " << __FILE__ << "/" << __LINE__ << endl;;
				this->_error = true;
				// close(this->_socket_fd);
				return ;
			} 
			else
			{
				cout << CYAN << __FILE__ << "/" << __LINE__ << RESET << endl;
				cout << "(Request) Error: client disconnected unexepectedly: " << __FILE__ << "/" << __LINE__ << endl;;
				this->_error = true;
				// close(this->_socket_fd);
				return ;
			}
		}
		buffer[receivedBytes] = '\0';
		request.append(buffer);
	}
	this->parse_request(request);
	
	/* -----Lire le body -----*/
	cout << CYAN << __FILE__ << "/" << __LINE__ << RESET << endl;
	cout << "Request : " << request << endl;
	this->determine_body_reading_strategy(socket_fd, buffer, request);
	cout << CYAN << __FILE__ << "/" << __LINE__ << RESET << endl;

	if (!this->_error)
		this->_request_fully_parsed = true;
}