
void c_response::load_upload_page(const string &version, const c_request &request)
{
    string html_template = load_file_content("./www/page_upload.html");
    string files_html;

	/* recuperer max_body_size pour lenvoyer a la page HTML */
	size_t max_body_size = request.get_client_max_body_size();
	cout << "client max body size = " << max_body_size << endl;
	string max_body_size_str = int_to_string(max_body_size);

	string upload_dir = "./www/upload/";
	DIR *dir = opendir(upload_dir.c_str());
	if (dir)
	{
		struct dirent *entry;
		while ((entry = readdir(dir)) != NULL)
		{
			string filename = entry->d_name;
			if (filename == "." || filename == "..")
				continue;

			files_html += "<div class=\"file-item\">";
			files_html += "<div class=\"file-info\">";
			files_html += "<span class=\"file-name-list\">" + filename + "</span>";
			files_html += "</div>";
			files_html += "<button class=\"delete-btn\" onclick=\"deleteFile('" + filename + "')\">DELETE</button>";
			files_html += "</div>\n";
		}
		closedir(dir);
	}
	else
	{
		files_html = "<div class=\"empty-message\">No uploaded files yet.</div>";
	}
	/* remplacememtn du placeholder {{MAX_BODY_SIZE}}*/
	size_t pos = html_template.find("{{MAX_BODY_SIZE}}");
	if (pos != string::npos)
		html_template.replace(pos, strlen("{{MAX_BODY_SIZE}}"), max_body_size_str);

	/* remplacement des fichiers existants */
	pos = html_template.find("{{FILES_HTML}}");
	if (pos != string::npos)
		html_template.replace(pos, strlen("{{FILES_HTML}}"), files_html);

    _file_content = html_template;
    build_success_response("page_upload.html", version, request);
}