# RESTE A FAIRE :
# error_page
# max_body_size OK
# alias OK
# autoindex OK
# redirect
# upload_path OK
# revoir tous les throw avec leurs messages d'erreur
# reflechir a une valeur max autorisee pour client_max_body_size

# le bloc server donne la configuration par defaut pour un host::port
# chaque bloc location a l'interieur peut surcharger ou completer 
# cette configuration pour une partie de l'arborescence des URLs

server{
    # LISTEN ----> OK
    # definit l'IP et/ou le port sur lequel le serveur ecoute
    # ouvrir un socket sur le port 8080 (par defaut sur toutes les interfaces reseau = 0.0.0.0:8080)
    # si 127.0.0.1:8080 : ecoute uniquement sur 8080 en local et pas depuis l'exterieur
    # syntaxe :
    listen 127.0.0.1:8080;
    # listen 8080; 
    # port seul -> toutes les interfaces

    # SERVER_NAME ----> OK
    # nom de domaine/ alias associes au serveur
    # peut etre vide, alors le premier server defini sur un host:port est le serveur par defaut
    # syntaxe :
    server_name localhost wwww.monsite.com;
    client_max_body_size 0;

    # ERROR_PAGE
    # definit une page personnalisee pour certains codes d'erreur
    # la cle est un code HTTP (ou plusieurs), la valeur est un chemin relatif
    # syntaxe : (verifier quels codes derreur faire)
    # error_page 404 /errors/404.html
    # error_page 500 502 503 504 /errors.50x.html;

    # CLIENT_MAX_BODY_SIZE
    # taille max d'une requete
    # 0 => desactive la limit
    # possible une seule lettre ou pas de lettre (0, 1, 100, 10k, 10K, 1g, 1G)
    # definir une max body size par defaut pour le server, possible de la changer avec la directive
    # syntaxe :
    # max_body_size 1M; #ou en octets

    # INDEX ----> OK
    # fichier par defaut a afficher si la requete est un repertoire
    # l'index par defaut du server est index.html SAUF si il est change 
    # avec la directive index au niveau du block server
    # Ngnix permet plusieurs fichiers index --> il faut prendre le premier qui fonctionne
    # si index est definit au niveau du server il s'applique partout
    # si index definit dans location la valeur est definie uniquement dans cette location
    # si l'utilisateur ne demande pas un fichier precis mais precise juste "/"
    # par ex : "http:localhost::8080/"
    # le serveur voit le chemin demande -> ./www
    # puis regarde la directive "index" et sert le fichier ./www/index.html
    index www/index.html www/index2.html www/index3.html;

    # pour le ROOT du serveur mettre en brut la racine par defaut "./www" dans le code

    location /www/images/ {
        index dkjfd ffff qqq;
        alias /abc/ddd/;
        upload_path /dd/aa/;
        autoindex on;
        client_max_body_size 5k;
        # methods GET POST DELETE;
    }

    location /srcs/cgi-bin/ {
        # root /www/cgi-bin/;
		cgi .py /bin/python3;
        methods GET POST DELETE;
	}
    # /www/images/ ---> correspond a l'url demandee

    ############## Directives par route (location)
    # ALIAS ---> OK
    # root concatene le chemin de la location avec le chemin du fichier demande
    # alias remplace completement le chemin de la location par un autre chemin

    # INDEX --- OK

    # METHODS ---> OK
    # liste des methodes HTTP acceptees pour la route
    # si methode demandee n'est pas autorisee => Bad Request
    # si la directive n'est pas utilisee alors par defaut toutes les methodes sont autorisees
    # syntaxe :
    # methods GET POST DELETE;

    # RETURN ou REDIRECT
    # redirige la route vers une autre URL
    # syntaxe :
    # redirect 301 http:exemple.com

    # AUTOINDEX ----> OK
    # active/desactive le listing du contenu d'un repertoire (le serveur genere une page HTML listant le contenu du dossier)
    # syntaxe :
    # autoindex on;
    # autoindex of;

    # CGI_EXTENSION et CGI_PATH ---> OK
    # Common Gateway Interface
    # associe une extension de fichier a un binaire CGI
    # Defini le bin a utilise pour les .py uniquement pour la location
	# sinon la location herite de des cgi_bin du serveur,
	# il n'y a pas de cgi_bin par defaut dans le serveur
    # syntaxe :
    # cgi_extension .php;
    # cgi_path /usr/bin/php-cgi;

    # lorsque serveur doit repondre a une requete CGI :
    # /usr/bin/python3 ./www/cgi-bin/hello.py
    # /usr/bin/python3 = programme interpretateur (executable) CGI
    # ./www/cgi-bin/hello.py = script du site web a executer

    # UPLOAD_PATH ----> OK
    # active l'upload pour cette route et definit ou stocker les fichiers
    # syntaxe :
    # upload_path /tmp/uploads;

}

server{

    index index.html www/index2.html www/index3.html;



}

# Directives au niveau server
# Elles configurent le bloc entier du serveur virtuel (et ses locations héritent de certaines valeurs si elles ne redéfinissent pas).

# listen → IP:PORT d’écoute
# server_name → nom(s) du serveur virtuel
# root → racine par défaut des fichiers du serveur (hérité si non défini en location) --> deja en dur dans le code pas a gerer
# client_max_body_size → taille max du corps de requête (hérité par les locations)
# error_page → pages d’erreurs personnalisées
# (optionnel selon ton projet) default_server → si plusieurs serveurs écoutent sur la même IP:port


# 📂 Directives au niveau location
# Elles modifient le comportement d’une portion d’URL :

# root → racine pour cette location (si absente → hérite du server) ---> pas a gerer
# alias → alternative à root, change complètement la résolution du chemin
# index → fichier(s) index à servir par défaut (peut être une liste)
# limit_except ou ton équivalent → liste des méthodes HTTP autorisées (GET, POST, DELETE, …)
# autoindex → active/désactive le listing de répertoire
# client_max_body_size (ou _location_body_size) → taille max pour cette location (écrase le server)
# return ou équivalent → redirection (code + URL)
# cgi_extension → association extension → exécutable CGI
# upload_path → dossier où stocker les fichiers uploadés


# ⚖️ Directives valides aux deux niveaux

# Certaines peuvent se trouver dans server et dans location :

# root (hérité si absent en location)
# client_max_body_size
# error_page